buildscript {
    ext {
        springBootVersion = '1.5.6.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath('com.ofg:uptodate-gradle-plugin:1.6.3')
        classpath('org.postgresql:postgresql:9.4.1212')
        classpath('org.liquibase:liquibase-gradle-plugin:1.2.4')
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.1.4"
    id "org.jetbrains.kotlin.plugin.spring" version "1.1.4"
    id "org.jetbrains.kotlin.plugin.jpa" version "1.1.4"
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-jpa'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
apply plugin: 'com.ofg.uptodate'
apply plugin: 'org.liquibase.gradle'

group = 'florianschmitt'
version = '0.0.1-SNAPSHOT'
jar.baseName = "connection"

sourceCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

tasks.withType(Test) {
    systemProperty "file.encoding", "UTF-8"
}

repositories {
    mavenCentral()
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}

springBoot {
    mainClass = 'de.florianschmitt.ConnectionBackendApplication'
}

if (project.hasProperty('includeFrontend')) {
    apply from: 'gradle/frontenddependencies.gradle'
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8"
    compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-mail:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-undertow:${springBootVersion}")
    compile group: 'com.google.guava', name: "guava", version: '21.0'
    compile('io.springfox:springfox-swagger2:2.6.1')
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.6.1'
    compile('org.modelmapper:modelmapper:0.7.8')
    compile('com.fasterxml.jackson.module:jackson-module-parameter-names:2.8.7')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.8.7')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.7')
    compile group: 'org.antlr', name: 'ST4', version: '4.0.8'
    compile group: 'org.liquibase', name: 'liquibase-core', version: '3.5.3'

    runtime('com.h2database:h2')
    compile('org.postgresql:postgresql:9.4.1212')
    compileOnly('org.projectlombok:lombok')

    testCompileOnly('org.projectlombok:lombok')
    testCompile "org.jetbrains.kotlin:kotlin-test"
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
    testCompile('org.apache.httpcomponents:httpclient:4.5.3')
    testCompile 'org.dbunit:dbunit:2.5.3'
    testCompile 'com.github.springtestdbunit:spring-test-dbunit:1.3.0'
}

test {
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

task buildDocker(type: Docker, dependsOn: build) {
    push = true
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

task createCurrentSchema(type: org.springframework.boot.gradle.run.BootRunTask) {
    doFirst() {
        main = 'de.florianschmitt.system.util.schema_creator.CreateCurrentSchemaApplication'
        classpath = sourceSets.main.runtimeClasspath
    }
}

liquibase {
    activities {
        main {
            url 'jdbc:postgresql://[::1]:5432/connection'
            username 'connection'
            password 'connection'
            referenceUrl 'jdbc:postgresql://[::1]:5432/connection_current'
            referenceUsername 'connection'
            referencePassword 'connection'
        }
    }
}

task deployHeroku(type: Exec, dependsOn: build) {
    commandLine 'cmd', '/c', "heroku deploy:jar ${jar.archivePath} --app $herokuApplicationName"
}
