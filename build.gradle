buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
        kotlinVersion = '1.2.60'
        // plugins must be literals
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://repo.spring.io/libs-milestone'
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath('com.ofg:uptodate-gradle-plugin:1.6.3')
        classpath('org.postgresql:postgresql:9.4.1212')
        classpath('org.liquibase:liquibase-gradle-plugin:1.2.4')
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version '1.2.60'
    id "org.jetbrains.kotlin.plugin.spring" version '1.2.60'
    id "org.jetbrains.kotlin.plugin.jpa" version '1.2.60'
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-jpa'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
apply plugin: 'com.ofg.uptodate'
apply plugin: 'org.liquibase.gradle'
apply plugin: 'jacoco'
apply plugin: 'org.junit.platform.gradle.plugin'

apply from: 'gradle/junit5jacoco.gradle'

group = 'florianschmitt'
version = '0.0.1-SNAPSHOT'
jar.baseName = "connection"

sourceCompatibility = JavaVersion.VERSION_1_9
compileJava.options.encoding = 'UTF-8'

tasks.withType(Test) {
    systemProperty "file.encoding", "UTF-8"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

tasks.withType(JacocoReport).all {
    reports {
        xml.enabled true
        html.enabled false
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
    }
}

project.afterEvaluate {
    if (JavaVersion.current().isJava9Compatible()) {
        def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')
        junitPlatformTestTask.jvmArgs '--add-modules', 'java.xml.bind'
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://repo.spring.io/libs-milestone'
    }
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}

bootJar {
    mainClassName = 'de.florianschmitt.ConnectionBackendApplication'
}

if (project.property('includeFrontend') == "true") {
    apply from: 'gradle/frontenddependencies.gradle'
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-mail:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-undertow:${springBootVersion}")
    compile group: 'com.google.guava', name: "guava", version: '21.0'
    compile('io.springfox:springfox-swagger2:2.6.1')
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.6.1'
    compile('org.modelmapper:modelmapper:0.7.8')
    compile('com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.6')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.6')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.6')
    compile group: 'org.antlr', name: 'ST4', version: '4.0.8'
    compile group: 'org.liquibase', name: 'liquibase-core', version: '3.5.3'

    runtime('com.h2database:h2:+')
    compile('org.postgresql:postgresql:9.4.1212')

    //    testCompile("org.junit.jupiter:junit-jupiter-api:5.2.0")
    //    testRuntime("org.junit.vintage:junit-vintage-engine:5.2.0")//4.12.1

    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.1")
    testRuntime("org.junit.vintage:junit-vintage-engine:4.12.1")

    testCompile "org.jetbrains.kotlin:kotlin-test"
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testCompile('org.apache.httpcomponents:httpclient:4.5.6')
    testCompile 'org.dbunit:dbunit:2.5.4'
    testCompile 'com.github.springtestdbunit:spring-test-dbunit:1.3.0'
}

task buildDocker(type: Docker, dependsOn: build) {
    push = true
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

task createCurrentSchema(type: org.springframework.boot.gradle.tasks.run.BootRun, dependsOn: compileKotlin) {
    main = 'de.florianschmitt.system.util.schema_creator.CreateCurrentSchemaApplication'
    classpath sourceSets.main.runtimeClasspath
    // include for Java 9 support
    //jvmArgs = ['--add-modules', 'java.xml.bind']
}

liquibase {
    activities {
        main {
            url 'jdbc:postgresql://[::1]:5432/connection'
            username 'connection'
            password 'connection'
            referenceUrl 'jdbc:postgresql://[::1]:5432/connection_current'
            referenceUsername 'connection'
            referencePassword 'connection'
        }
    }
}

task deployHeroku(type: Exec, dependsOn: build) {
    commandLine 'cmd', '/c', "heroku deploy:jar \"${jar.archivePath}\" --app $herokuApplicationName"
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
}
